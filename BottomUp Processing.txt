- Start form smaller cases and build towards larger cases.
Example: Build for cases where i = 0,1,2,3,etc as base cases. Then build dp.


So basically find the values for the starting cases untill the method can be used as a algorithm to calculate for bigger cases.

For Example:

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you 
from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
             Total amount you can rob = 1 + 3 = 4.

In this case:
for 0 house answer will be 0
for 1 house answer will be money in that house
for 2 houses answer will be mo max of the money in two house
for 3 house -> This is the case that can be used to create a hypothesis

so for 3 houses it will be:
Money at the 3rd house + at the 1st house or money at the 2nd max. Basically max of the two.

def rob(self, nums: List[int]) -> int:
        if len(nums) == 0:
            return 0
        if len(nums) == 1:
            return nums[0]
        if len(nums) == 2:
            return max(nums[0],nums[1])
        
        dp = [i for i in nums]
        dp[0] = nums[0]
        dp[1] = max(nums[0],nums[1])
        for i in range(2,len(nums)):
            dp[i] = max((dp[i-2]+dp[i]), dp[i-1])
        return dp[len(nums)-1]